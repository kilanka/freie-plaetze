# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  institutions(where: InstitutionWhereInput! = {}, orderBy: [InstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstitutionWhereUniqueInput): [Institution!]
  institutionsCount(where: InstitutionWhereInput! = {}): Int
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  providersCount(where: ProviderWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  institutions: InstitutionManyRelationFilter
  providers: ProviderManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input InstitutionManyRelationFilter {
  every: InstitutionWhereInput
  some: InstitutionWhereInput
  none: InstitutionWhereInput
}

input ProviderManyRelationFilter {
  every: ProviderWhereInput
  some: ProviderWhereInput
  none: ProviderWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  institutions: InstitutionRelateToManyForUpdateInput
  providers: ProviderRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input InstitutionRelateToManyForUpdateInput {
  disconnect: [InstitutionWhereUniqueInput!]
  set: [InstitutionWhereUniqueInput!]
  create: [InstitutionCreateInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input ProviderRelateToManyForUpdateInput {
  disconnect: [ProviderWhereUniqueInput!]
  set: [ProviderWhereUniqueInput!]
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  institutions: InstitutionRelateToManyForCreateInput
  providers: ProviderRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input InstitutionRelateToManyForCreateInput {
  create: [InstitutionCreateInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input ProviderRelateToManyForCreateInput {
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

type InstitutionType {
  id: ID!
  paragraph: String!
  name: String!
  shortName: String!
}

input InstitutionTypeWhereUniqueInput {
  id: ID
  paragraph: String
}

input InstitutionTypeWhereInput {
  AND: [InstitutionTypeWhereInput!]
  OR: [InstitutionTypeWhereInput!]
  NOT: [InstitutionTypeWhereInput!]
  id: IDFilter
  paragraph: StringFilter
  name: StringFilter
  shortName: StringFilter
}

input InstitutionTypeOrderByInput {
  id: OrderDirection
  paragraph: OrderDirection
  name: OrderDirection
  shortName: OrderDirection
}

input InstitutionTypeUpdateInput {
  paragraph: String
  name: String
  shortName: String
}

input InstitutionTypeUpdateArgs {
  where: InstitutionTypeWhereUniqueInput!
  data: InstitutionTypeUpdateInput!
}

input InstitutionTypeCreateInput {
  paragraph: String
  name: String
  shortName: String
}

type Institution {
  id: ID!
  name: String!
  slug: String!
  owner: User
  provider: Provider
  types(where: InstitutionTypeWhereInput! = {}, orderBy: [InstitutionTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstitutionTypeWhereUniqueInput): [InstitutionType!]
  typesCount(where: InstitutionTypeWhereInput! = {}): Int
  createdAt: DateTime!
  lastUpdated: DateTime!
  gender: InstitutionGenderType!
  ageFrom: Int
  ageTo: Int
  arePlacesAvailable: Boolean!
  street: String!
  streetNumber: String!
  zip: String!
  city: String!
  positionLat: Float
  positionLng: Float
  homepage: String
  email: String
  phone: String
  mobilePhone: String
  description: Institution_description_Document
  descriptionPlain: String
  logo: ImageFieldOutput
  logoUrl(format: InstitutionLogoImageFormats): String
  photo: ImageFieldOutput
  photoUrl(format: InstitutionPhotoImageFormats): String
}

enum InstitutionGenderType {
  mixed
  f
  m
}

type Institution_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum InstitutionLogoImageFormats {
  institutionPage
}

enum InstitutionPhotoImageFormats {
  institutionListItem
  institutionPage
}

input InstitutionWhereUniqueInput {
  id: ID
  slug: String
}

input InstitutionWhereInput {
  AND: [InstitutionWhereInput!]
  OR: [InstitutionWhereInput!]
  NOT: [InstitutionWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  owner: UserWhereInput
  provider: ProviderWhereInput
  types: InstitutionTypeManyRelationFilter
  createdAt: DateTimeFilter
  lastUpdated: DateTimeFilter
  gender: InstitutionGenderTypeNullableFilter
  ageFrom: IntNullableFilter
  ageTo: IntNullableFilter
  arePlacesAvailable: BooleanFilter
  street: StringFilter
  streetNumber: StringFilter
  zip: StringFilter
  city: StringFilter
  positionLat: FloatNullableFilter
  positionLng: FloatNullableFilter
  homepage: StringFilter
  email: StringFilter
  phone: StringFilter
  mobilePhone: StringFilter
  descriptionPlain: StringFilter
}

input InstitutionTypeManyRelationFilter {
  every: InstitutionTypeWhereInput
  some: InstitutionTypeWhereInput
  none: InstitutionTypeWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input InstitutionGenderTypeNullableFilter {
  equals: InstitutionGenderType
  in: [InstitutionGenderType!]
  notIn: [InstitutionGenderType!]
  not: InstitutionGenderTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input InstitutionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  lastUpdated: OrderDirection
  gender: OrderDirection
  ageFrom: OrderDirection
  ageTo: OrderDirection
  arePlacesAvailable: OrderDirection
  street: OrderDirection
  streetNumber: OrderDirection
  zip: OrderDirection
  city: OrderDirection
  positionLat: OrderDirection
  positionLng: OrderDirection
  homepage: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  mobilePhone: OrderDirection
  descriptionPlain: OrderDirection
}

input InstitutionUpdateInput {
  name: String
  slug: String
  owner: UserRelateToOneForUpdateInput
  provider: ProviderRelateToOneForUpdateInput
  types: InstitutionTypeRelateToManyForUpdateInput
  createdAt: DateTime
  lastUpdated: DateTime
  gender: InstitutionGenderType
  ageFrom: Int
  ageTo: Int
  arePlacesAvailable: Boolean
  street: String
  streetNumber: String
  zip: String
  city: String
  positionLat: Float
  positionLng: Float
  homepage: String
  email: String
  phone: String
  mobilePhone: String
  description: JSON
  descriptionPlain: String
  logo: ImageFieldInput
  photo: ImageFieldInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProviderRelateToOneForUpdateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
  disconnect: Boolean
}

input InstitutionTypeRelateToManyForUpdateInput {
  disconnect: [InstitutionTypeWhereUniqueInput!]
  set: [InstitutionTypeWhereUniqueInput!]
  create: [InstitutionTypeCreateInput!]
  connect: [InstitutionTypeWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input InstitutionUpdateArgs {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateInput!
}

input InstitutionCreateInput {
  name: String
  slug: String
  owner: UserRelateToOneForCreateInput
  provider: ProviderRelateToOneForCreateInput
  types: InstitutionTypeRelateToManyForCreateInput
  createdAt: DateTime
  lastUpdated: DateTime
  gender: InstitutionGenderType
  ageFrom: Int
  ageTo: Int
  arePlacesAvailable: Boolean
  street: String
  streetNumber: String
  zip: String
  city: String
  positionLat: Float
  positionLng: Float
  homepage: String
  email: String
  phone: String
  mobilePhone: String
  description: JSON
  descriptionPlain: String
  logo: ImageFieldInput
  photo: ImageFieldInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ProviderRelateToOneForCreateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
}

input InstitutionTypeRelateToManyForCreateInput {
  create: [InstitutionTypeCreateInput!]
  connect: [InstitutionTypeWhereUniqueInput!]
}

type Provider {
  id: ID!
  name: String!
  owner: User
  institutions(where: InstitutionWhereInput! = {}, orderBy: [InstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstitutionWhereUniqueInput): [Institution!]
  institutionsCount(where: InstitutionWhereInput! = {}): Int
  homepage: String
  street: String
  streetNumber: String
  zip: String
  city: String
}

input ProviderWhereUniqueInput {
  id: ID
}

input ProviderWhereInput {
  AND: [ProviderWhereInput!]
  OR: [ProviderWhereInput!]
  NOT: [ProviderWhereInput!]
  id: IDFilter
  name: StringFilter
  owner: UserWhereInput
  institutions: InstitutionManyRelationFilter
  homepage: StringFilter
  street: StringFilter
  streetNumber: StringFilter
  zip: StringFilter
  city: StringFilter
}

input ProviderOrderByInput {
  id: OrderDirection
  name: OrderDirection
  homepage: OrderDirection
  street: OrderDirection
  streetNumber: OrderDirection
  zip: OrderDirection
  city: OrderDirection
}

input ProviderUpdateInput {
  name: String
  owner: UserRelateToOneForUpdateInput
  institutions: InstitutionRelateToManyForUpdateInput
  homepage: String
  street: String
  streetNumber: String
  zip: String
  city: String
}

input ProviderUpdateArgs {
  where: ProviderWhereUniqueInput!
  data: ProviderUpdateInput!
}

input ProviderCreateInput {
  name: String
  owner: UserRelateToOneForCreateInput
  institutions: InstitutionRelateToManyForCreateInput
  homepage: String
  street: String
  streetNumber: String
  zip: String
  city: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createInstitutionType(data: InstitutionTypeCreateInput!): InstitutionType
  createInstitutionTypes(data: [InstitutionTypeCreateInput!]!): [InstitutionType]
  updateInstitutionType(where: InstitutionTypeWhereUniqueInput!, data: InstitutionTypeUpdateInput!): InstitutionType
  updateInstitutionTypes(data: [InstitutionTypeUpdateArgs!]!): [InstitutionType]
  deleteInstitutionType(where: InstitutionTypeWhereUniqueInput!): InstitutionType
  deleteInstitutionTypes(where: [InstitutionTypeWhereUniqueInput!]!): [InstitutionType]
  createInstitution(data: InstitutionCreateInput!): Institution
  createInstitutions(data: [InstitutionCreateInput!]!): [Institution]
  updateInstitution(where: InstitutionWhereUniqueInput!, data: InstitutionUpdateInput!): Institution
  updateInstitutions(data: [InstitutionUpdateArgs!]!): [Institution]
  deleteInstitution(where: InstitutionWhereUniqueInput!): Institution
  deleteInstitutions(where: [InstitutionWhereUniqueInput!]!): [Institution]
  createProvider(data: ProviderCreateInput!): Provider
  createProviders(data: [ProviderCreateInput!]!): [Provider]
  updateProvider(where: ProviderWhereUniqueInput!, data: ProviderUpdateInput!): Provider
  updateProviders(data: [ProviderUpdateArgs!]!): [Provider]
  deleteProvider(where: ProviderWhereUniqueInput!): Provider
  deleteProviders(where: [ProviderWhereUniqueInput!]!): [Provider]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  institutionTypes(where: InstitutionTypeWhereInput! = {}, orderBy: [InstitutionTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstitutionTypeWhereUniqueInput): [InstitutionType!]
  institutionType(where: InstitutionTypeWhereUniqueInput!): InstitutionType
  institutionTypesCount(where: InstitutionTypeWhereInput! = {}): Int
  institutions(where: InstitutionWhereInput! = {}, orderBy: [InstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstitutionWhereUniqueInput): [Institution!]
  institution(where: InstitutionWhereUniqueInput!): Institution
  institutionsCount(where: InstitutionWhereInput! = {}): Int
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  provider(where: ProviderWhereUniqueInput!): Provider
  providersCount(where: ProviderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  isEmailRegistered(email: String!): Boolean!

  """
  If `cityOrZip` is not empty, return institutions within `radius` km distance from `cityOrZip`. Otherwise, do not filter by location. If `age` is not null, only those institutions are returned whose age range includes `age`.
  """
  institutionSearchResults(radius: Int!, cityOrZip: String! = "", age: Int, paragraphs: [String!] = [], where: InstitutionWhereInput! = {}, orderBy: [InstitutionOrderByInput!]! = [], limit: Int, offset: Int! = 0): [Institution!]!
  institutionSearchResultsCount(radius: Int!, cityOrZip: String! = "", age: Int, paragraphs: [String!] = [], where: InstitutionWhereInput! = {}): Int!
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
